- hosts: "{{ hosts_prefix }}-tsuru-api*"
  sudo: yes
  pre_tasks:
    - include: ssl_proxy_pre.yml
    - name: Tsuru Api | Remove daily snapshots repo
      apt_repository: repo='ppa:tsuru/snapshots' state=absent
      when: vulcand is undefined
    - name: Tsuru Api | Remove our private repo
      apt_repository: repo='ppa:multicloudpaas/tsuru' state=absent
      when: vulcand is defined
  vars:
    router_config_vulcand:
      domain: "{{ hipache_host_external_lb }}"
      api-url: "http://{{ tsuru_router_host }}:{{ router_api_port }}"
    router_config_hipache:
      domain: "{{ hipache_host_external_lb }}"
      redis-server: "{{ redis_host }}:{{ redis_port }}"
    upstream_port: "{{ api_port }}"
    tsuru_api_url: "{{ tsuru_api_external_url }}"
  vars_files:
    - "ssl_proxy_vars.yml"
  roles:
    - role: tsuru_api
      tsuru_package_latest: true
      tsuru_api_listen_addr: 127.0.0.1
      tsuru_repo: 'ppa:tsuru/ppa'
      tsuru_router_type: "{% if vulcand is defined %}vulcand{% else %}hipache{% endif %}"
      tsuru_router_config: "{% if vulcand is defined %}{{ router_config_vulcand }}{% else %}{{ router_config_hipache }}{% endif %}"
      tags: tsuru_api
    - role: jdauphant.nginx
  tasks:
    - name: Tsuru Api | Install httplib2 for Ansible uri module
      apt: name=python-httplib2 state=present

# Run these tasks explicitly on 1st API server as the rest of playbooks (post install) expect it
- hosts: "{{ hosts_prefix }}-tsuru-api-0"
  sudo: yes
  tasks:
    - name: Tsuru Api | Add admin team
      shell: >
        mongo tsuru --eval 'db.teams.update({_id: "admin"}, {_id: "admin"}, {upsert: true})';
      delegate_to: "{{ mongodb_host }}"

    - name: Tsuru Api | Add admin user to admin team
      shell: >
        mongo tsuru --eval "db.teams.update({_id: 'admin'}, {\$addToSet: {users: '{{admin_user}}'}})";
      delegate_to: "{{ mongodb_host }}"

    - name: Tsuru Api | Add admin user
      uri:
        method=POST body_format=json
        body="{\"email\":\"{{ admin_user }}\",\"password\":\"{{ admin_password }}\"}"
        url=http://127.0.0.1:{{ api_port }}/users
        status_code=201,409

    - name: Tsuru Api | Login with the admin user
      uri:
        method=POST body_format=json
        body="{\"password\":\"{{ admin_password }}\"}"
        url=http://127.0.0.1:{{ api_port }}/users/{{ admin_user }}/tokens
        return_content=yes
      register: login_response

    - name: Tsuru Api | Write admin token
      copy: dest=~/.tsuru_token mode=0600 content="{{ (login_response.content|from_json).token }}"

    - name: Tsuru Api | List docker node IPs in the default pool
      shell: >
        tsuru-admin docker-node-list -f pool=default | awk '$2 ~ /^http/ {print $2}'
      register: default_pool

    - name: Tsuru Api | Get names of our environment docker nodes
      shell: >
        echo {{ groups.keys() | join(' ')}} | grep -o "{{ hosts_prefix }}-tsuru-coreos-docker-[0-9]\+"
      register: docker_nodes

    - name: Tsuru Api | Resolve docker node names into URLs
      shell: >
        echo http://{{ hostvars[groups[item][0]][ip_field_name] }}:{{ docker_port }}
      with_items: docker_nodes.stdout_lines
      register: docker_url

    - name: Tsuru Api | Create list of docker node URLs
      set_fact: docker_urls="{{ docker_url.results | map(attribute='stdout') | list }}"

    - name: Tsuru Api | Register new coreos docker nodes to the default pool
      shell: >
        tsuru-admin docker-node-add --register address={{ item }} pool=default </dev/null
      when: not "{{ item }}" in default_pool.stdout
      with_items: docker_urls

    - name: Tsuru Api | Remove zombie nodes from the default pool
      shell: >
        tsuru-admin docker-node-remove {{ item }} -y
      when: not "{{ item }}" in docker_urls
      with_items: default_pool.stdout_lines
