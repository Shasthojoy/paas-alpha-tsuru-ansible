# Bring up db tier (redis, mongodb).
- hosts: "{{ hosts_prefix }}-tsuru-db"
  sudo: yes
  roles:
    - bennojoy.redis

- hosts: "{{ hosts_prefix }}-tsuru-db"
  sudo: yes
  sudo_user: root
  roles:
    - greendayonfire.mongodb

# tsuru core components.
- hosts: "{{ hosts_prefix }}-tsuru-gandalf*"
  sudo: yes
  roles:
    - gandalf

- hosts: "{{ hosts_prefix }}-tsuru-api*"
  sudo: yes
  roles:
    - role: tsuru_api
      tags: tsuru_api

- hosts: "{{ hosts_prefix }}-tsuru-api*"
  sudo: yes
  tasks:
    - name: Install httplib2 for Ansible uri module
      apt: name=python-httplib2 state=present

    - name: add admin team
      run_once: true
      shell: >
        mongo tsuru --eval 'db.teams.update({_id: "admin"}, {_id: "admin"}, {upsert: true})';
      delegate_to: "{{ mongodb_host }}"

    - name: add admin user to admin team
      run_once: true
      shell: >
        mongo tsuru --eval "db.teams.update({_id: 'admin'}, {\$addToSet: {users: '{{admin_user}}'}})";
      delegate_to: "{{ mongodb_host }}"

    - name: add admin user
      run_once: true
      uri:
        method=POST body_format=json
        body="{\"email\":\"{{ admin_user }}\",\"password\":\"{{ admin_password }}\"}"
        url=http://127.0.0.1:{{ api_port }}/users
        status_code=201,409

    - name: login with the admin user
      run_once: true
      uri:
        method=POST body_format=json
        body="{\"password\":\"{{ admin_password }}\"}"
        url=http://127.0.0.1:{{ api_port }}/users/{{ admin_user }}/tokens
        return_content=yes
      register: login_response

    - name: write admin token
      run_once: true
      copy: dest=~/.tsuru_token mode=0600 content="{{ (login_response.content|from_json).token }}"

- hosts: "{{ hosts_prefix }}-tsuru-gandalf*"
  sudo: yes
  tasks:
    - name: generate tsuru token
      run_once: true
      shell: tsr token
      delegate_to: "{{ tsuru_api_host }}"
      register: tsr_token

    - name: write tsuru token to .bash_profile
      lineinfile:
        state: present
        dest: /home/git/.bash_profile
        regexp: export TSURU_TOKEN=
        line: export TSURU_TOKEN={{ tsr_token.stdout }}

    - name: restart gandalf
      service: name=gandalf-server state=restarted

- hosts: "{{ hosts_prefix }}-tsuru-docker*"
  sudo: yes
  roles:
    - docker_server

  post_tasks:
    - name: Register node.
      shell: >
        tsuru-admin docker-node-add --register address=http://{{ gce_private_ip }}:{{ docker_port }} pool=default
      delegate_to: "{{ tsuru_api_host }}"
      when: gce_private_ip is defined
    - name: Register node.
      shell: >
        tsuru-admin docker-node-add --register address=http://{{ ec2_private_ip_address }}:{{ docker_port }} pool=default
      delegate_to: "{{ tsuru_api_host }}"
      when: ec2_private_ip_address is defined
    - name: Check docker nodes are in the default pool
      shell: >
        tsuru-admin docker-node-list -f pool=default
      delegate_to: "{{ tsuru_api_host }}"
      register: docker_node_list
    - name: Update docker node metadata for default pool (AWS)
      shell: >
        tsuru-admin docker-node-update http://{{ ec2_private_ip_address }}:{{ docker_port }} pool=default
      delegate_to: "{{ tsuru_api_host }}"
      when: "ec2_private_ip_address is defined and not ec2_private_ip_address in docker_node_list.stdout"
    - name: Update docker node metadata for default pool (GCE)
      shell: >
        tsuru-admin docker-node-update http://{{ gce_private_ip }}:{{ docker_port }} pool=default
      delegate_to: "{{ tsuru_api_host }}"
      when: "gce_private_ip is defined and not gce_private_ip in docker_node_list.stdout"


- include: postgres.yml
- include: router.yml
- include: post-install.yml
