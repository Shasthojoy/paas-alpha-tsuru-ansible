- hosts: "localhost"
  sudo: no
  tasks:
    - name: Tsuru target-list
      shell: >
        tsuru target-list
      register: tsuru_targets
    - name: Tsuru add target.
      shell: >
        tsuru target-add {{ deploy_env }}_{{ domain_name }} {{ api_protocol }}://{{ deploy_env }}-api.{{ domain_name }}:{{ api_port_external }}
      when: "not '{{ deploy_env }}_{{ domain_name }}' in tsuru_targets.stdout"
    - name: Tsuru set target.
      shell: >
        tsuru target-set {{ deploy_env }}_{{ domain_name }}
    - name: Tsuru login
      shell: >
        echo {{ admin_password }} | tsuru login {{ admin_user }}

    - name: Tsuru pool-list
      shell: > 
        tsuru-admin pool-list
      register: tsuru_pools
    - name: Tsuru pool add default
      shell: >
        tsuru-admin pool-add default
      when: "not 'default' in tsuru_pools.stdout"
    - name: Check admin pool
      shell: >
        tsuru pool-list | grep admin
      register: admin_pool
    - name: Add admin team to default pool
      shell: >
        tsuru-admin pool-teams-add default admin
      when: "not 'default' in admin_pool.stdout"

    - name: Tsuru platform-list
      shell: >
        tsuru platform-list | awk {'print $2'}
      register: tsuru_platforms
    - name: Tsuru platform add python
      ignore_errors: no
      shell: >
        tsuru-admin platform-add python -d https://raw.github.com/tsuru/basebuilder/master/python/Dockerfile
      when: "not 'python' in tsuru_platforms.stdout"

    - name: Tsuru key-list
      shell: >
        tsuru key-list
      register: tsuru_keys
    - name: Tsuru add ssh key
      shell: >
        tsuru key-add deployer ~/.ssh/insecure-deployer.pub
      when: "not 'deployer' in tsuru_keys.stdout"

    - name: Tsuru app-list
      shell: >
        tsuru app-list
      register: tsuru_apps
    - name: Tsuru app-create dashboard
      ignore_errors: yes
      shell: >
        tsuru app-create dashboard python
      when: "not 'dashboard' in tsuru_apps.stdout"
    - name: Get gandalf repo for dashboard
      shell: >
        tsuru app-info -a dashboard | grep -o 'git@.\+'
      register: dashboard_git_remote

    - name: Git pull dashboard
      git:
        repo: https://github.com/tsuru/tsuru-dashboard.git
        dest: /tmp/tsuru-dashboard
    - name: Git push dashboard to gandalf
      shell: >
        git push {{ dashboard_git_remote.stdout }} master
      args: 
        chdir: /tmp/tsuru-dashboard
    - name: Tsuru app-info dashboard
      shell: >
        tsuru app-info -a dashboard
      register: dashboard_app_info

# This deploys postgresapi, but to fully operate more work needs to be done 
# outside this repository (firewall configuration, ssl certificates etc.)
    - name: Tsuru app-create postgresapi
      ignore_errors: yes
      shell: >
        tsuru app-create postgresapi python
      when: "not 'postgresapi' in tsuru_apps.stdout"
    - name: Get gandalf repo for postgresapi
      shell: >
        tsuru app-info -a postgresapi | grep -o 'git@.\+'
      register: postgresapi_git_remote

    - name: Git pull postgresapi
      git:
        repo: https://github.com/tsuru/postgres-api
        dest: /tmp/postgresapi
    - name: Git push postgresapi to gandalf
      shell: >
        git push {{ postgresapi_git_remote.stdout }} master
      args:
        chdir: /tmp/postgresapi
      register: postgresapi_push_result
    - name: Tsuru app-info postgresapi
      shell: >
        tsuru app-info -a postgresapi
      register: postgresapi_app_info

    - name: Tsuru set environment variables for postgresapi
      shell: >
        tsuru env-set -a postgresapi POSTGRESAPI_DATABASE=postgresapi;
        tsuru env-set -a postgresapi POSTGRESAPI_USER=postgresapi;
        tsuru env-set -a postgresapi POSTGRESAPI_PASSWORD={{ pg_apiuser_pass }};
        tsuru env-set -a postgresapi POSTGRESAPI_HOST={{ postgres_host }};
        tsuru env-set -a postgresapi POSTGRESAPI_PORT=5432;
        tsuru env-set -a postgresapi POSTGRESAPI_SALT=md5;
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_HOST={{ postgres_host }};
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_PORT=5432;
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_ADMIN=postgresadmin;
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_ADMIN_PASSWORD={{ pg_admin_pass }};
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_PUBLIC_HOST={{ postgres_host }};
      when: "not 'Everything up-to-date' in postgresapi_push_result.stderr"
    - name: Tsuru app-run db upgrade
      shell: >
        tsuru app-run --app postgresapi -- python manage.py upgrade_db
      when: "not 'Everything up-to-date' in postgresapi_push_result.stderr"

    - debug: var=dashboard_app_info.stdout_lines
    - debug: var=postgresapi_app_info.stdout_lines

