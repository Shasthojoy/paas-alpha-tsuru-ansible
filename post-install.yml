- hosts: "{{ hosts_prefix }}-tsuru-api-0"
  sudo: yes
  tasks:
    - name: Post Install Tasks | Install git client
      apt: name=git state=present
    - name: Post Install Tasks | Install crane
      apt: name=crane state=present
    - name: Post Install Tasks | Check tsuru_deployer key
      stat: path=~/.ssh/tsuru_deployer
      register: tsuru_deployer_key

    - name: Post Install Tasks | Generate tsuru_deployer key
      shell: >
        ssh-keygen -b 2048 -t rsa -f ~/.ssh/tsuru_deployer -q -N ""
      when: tsuru_deployer_key.stat.exists == False
    - name: Post Install Tasks | Generate tsuru_deployer.pub key
      shell: >
        ssh-keygen -y -f ~/.ssh/tsuru_deployer >~/.ssh/tsuru_deployer.pub
      when: tsuru_deployer_key.stat.exists == False

    - name: Post Install Tasks | Generate ssh config for git
      copy:
        content: |
          Host {{ deploy_env }}-gandalf.{{ domain_name }}
            HostName {{ deploy_env }}-gandalf.{{ domain_name }}
            User git
            IdentityFile ~/.ssh/tsuru_deployer
        dest: ~/.ssh/config
        mode: 0600

    - name: Post Install Tasks | Add Gandalf to known hosts
      shell: >
        ssh-keyscan {{ deploy_env }}-gandalf.{{ domain_name }} >~/.ssh/known_hosts

    - name: Post Install Tasks | Tsuru pool-list
      shell: >
        tsuru-admin pool-list
      register: tsuru_pools
    - name: Post Install Tasks | Tsuru pool add default
      shell: >
        tsuru-admin pool-add default
      when: "not 'default' in tsuru_pools.stdout"
    - name: Post Install Tasks | Check admin pool
      shell: >
        tsuru pool-list | grep admin
      register: admin_pool
    - name: Post Install Tasks | Add admin team to default pool
      shell: >
        tsuru-admin pool-teams-add default admin
      when: "not 'default' in admin_pool.stdout"

    - name: Post Install Tasks | Tsuru platform-list
      shell: >
        tsuru platform-list | awk {'print $2'}
      register: tsuru_platforms
    - name: Post Install Tasks | Tsuru platform add python
      shell: >
        tsuru-admin platform-add python -d https://raw.github.com/tsuru/basebuilder/master/python/Dockerfile
      when: "not 'python' in tsuru_platforms.stdout"
    - name: Post Install Tasks | Tsuru platform add java
      shell: >
        tsuru-admin platform-add java -d https://raw.github.com/tsuru/basebuilder/master/java/Dockerfile
      when: "not 'java' in tsuru_platforms.stdout"
    - name: Post Install Tasks | Tsuru platform add static
      shell: >
        tsuru-admin platform-add static -d https://raw.github.com/tsuru/basebuilder/master/static/Dockerfile
      when: "not 'static' in tsuru_platforms.stdout"

    - name: Post Install Tasks | Tsuru list tsuru_deployer key
      shell: >
        tsuru key-list -n | awk '$2 == "tsuru_deployer"'
      register: tsuru_keys
    - name: Post Install Tasks | Get local key content
      shell: cat ~/.ssh/tsuru_deployer.pub
      register: public_key_content
    - name: Post Install Tasks | Tsuru remove old key
      shell: >
        tsuru key-remove -y tsuru_deployer
      when: "not public_key_content.stdout in tsuru_keys.stdout and tsuru_keys.stdout != ''"
    - name: Post Install Tasks | Tsuru add ssh key
      shell: >
        tsuru key-add tsuru_deployer ~/.ssh/tsuru_deployer.pub
      when: "not public_key_content.stdout in tsuru_keys.stdout"

    - name: Post Install Tasks | Tsuru app-list
      shell: >
        tsuru app-list
      register: tsuru_apps
    - name: Post Install Tasks | Tsuru app-create dashboard
      shell: >
        tsuru app-create dashboard python -t admin
      when: "not 'dashboard' in tsuru_apps.stdout"
    - name: Post Install Tasks | Get gandalf repo for dashboard
      shell: >
        tsuru app-info -a dashboard | grep -o 'git@.\+'
      register: dashboard_git_remote

    - name: Post Install Tasks | Git pull dashboard
      git:
        repo: https://github.com/tsuru/tsuru-dashboard.git
        dest: /tmp/tsuru-dashboard

    - name: Post Install Tasks | Git push dashboard to gandalf
      shell: >
        git push {{ dashboard_git_remote.stdout }} master
      args:
        chdir: /tmp/tsuru-dashboard

    - name: Post Install Tasks | Tsuru app-info dashboard
      shell: >
        tsuru app-info -a dashboard
      register: dashboard_app_info

    # Adding postgresapi app

    - name: Post Install Tasks | Tsuru app-create postgresapi
      shell: >
        tsuru app-create postgresapi python -t admin
      when: "not 'postgresapi' in tsuru_apps.stdout"

    - name: Post Install Tasks | Git pull postgresapi
      git:
        repo: https://github.com/tsuru/postgres-api
        dest: /tmp/postgresapi
        version: "f25564ed29fc204d0207a54a28011e33789f89ca"

    - name: Post Install Tasks | Get gandalf repo for postgresapi
      shell: >
        tsuru app-info -a postgresapi | grep -o 'git@.\+'
      register: postgresapi_git_remote

    - name: Post Install Tasks | Git push postgresapi to gandalf
      shell: >
        git push {{ postgresapi_git_remote.stdout }} master
      args:
        chdir: /tmp/postgresapi
      register: postgresapi_push_result

    - name: Post Install Tasks | Tsuru app-info postgresapi
      shell: >
        tsuru app-info -a postgresapi
      register: postgresapi_app_info

    - name: Post Install Tasks | Tsuru set environment variables for postgresapi
      shell: >
        tsuru env-set -a postgresapi POSTGRESAPI_DATABASE=postgresapi;
        tsuru env-set -a postgresapi POSTGRESAPI_USER=postgresapi;
        tsuru env-set -a postgresapi POSTGRESAPI_PASSWORD={{ pg_apiuser_pass }};
        tsuru env-set -a postgresapi POSTGRESAPI_HOST={{ postgres_master_host }};
        tsuru env-set -a postgresapi POSTGRESAPI_PORT=5432;
        tsuru env-set -a postgresapi POSTGRESAPI_SALT=md5;
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_HOST={{ postgres_master_host }};
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_PORT=5432;
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_ADMIN=postgresadmin;
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_ADMIN_PASSWORD={{ pg_admin_pass }};
        tsuru env-set -a postgresapi POSTGRESAPI_SHARED_PUBLIC_HOST={{ postgres_master_host }};
        tsuru env-set -a postgresapi POSTGRESAPI_BROKER_USERNAME=postgresadmin;
        tsuru env-set -a postgresapi POSTGRESAPI_BROKER_PASSWORD={{ pg_admin_pass }};
      when: "not 'Everything up-to-date' in postgresapi_push_result.stderr"
    - name: Post Install Tasks | Tsuru app-run db upgrade
      shell: >
        tsuru app-run --app postgresapi -- python manage.py upgrade_db
      when: "not 'Everything up-to-date' in postgresapi_push_result.stderr"

    - name: Post Install Tasks | Add <deploy_env>-postgresapi.<domain_name> cname to posgtresqlapi app
      shell: >
        tsuru cname-add {{ deploy_env }}-postgresapi.{{ domain_name }} -a postgresapi
      when: "not '-postgresapi.' in postgresapi_app_info.stdout"

    - name: Post Install Tasks | Generate postgresapi.yml
      copy:
        content: |
          id: postgresql
          username: postgresadmin
          password: {{ pg_admin_pass }}
          endpoint:
            production: https://{{ deploy_env }}-postgresapi.{{ domain_name }}
        dest: ~/postgresapi.yml

    - name: Post Install Tasks | Get service list
      shell: >
        tsuru service-list
      register: service_list
    - name: Post Install Tasks | Register service
      shell: >
        crane create ~/postgresapi.yml
      when: "not 'postgresql' in service_list.stdout"

    # Elasticsearch

    - name: Post Install Tasks | Tsuru app-create elasticsearchapi
      shell: >
        tsuru app-create elasticsearchapi python -t admin
      when: "not 'elasticsearchapi' in tsuru_apps.stdout"

    - name: Post Install Tasks | Get env variables of elasticsearchapi
      shell: >
        tsuru env-get -a elasticsearchapi
      register: elasticsearchapi_env

    - name: Post Install Tasks | Tsuru set environment variables for elasticsearchapi
      shell: >
        tsuru env-set -a elasticsearchapi ELASTICSEARCH_HOST={{ elasticsearch_host }};
      when: "not \"{{ elasticsearch_host }}\" in elasticsearchapi_env.stdout"

    - name: Post Install Tasks | Git pull elasticsearchapi
      git:
        repo: https://github.com/alphagov/elastic-search-api.git
        dest: /tmp/elasticsearchapi
        version: "717c1faa36c926ec8715fc7245ad8bde0f8a30f6"

    - name: Post Install Tasks | Get gandalf repo for elasticsearchapi
      shell: >
        tsuru app-info -a elasticsearchapi | grep -o 'git@.\+'
      register: elasticsearchapi_git_remote

    - name: Post Install Tasks | Git push elasticsearchapi to gandalf
      shell: >
        git push {{ elasticsearchapi_git_remote.stdout }} master
      args:
        chdir: /tmp/elasticsearchapi

    - name: Post Install Tasks | Tsuru app-info elasticsearchapi
      shell: >
        tsuru app-info -a elasticsearchapi
      register: elasticsearchapi_app_info

    - name: Post Install Tasks | Add <deploy_env>-elasticsearchapi.<domain_name> cname to elasticsearchapi app
      shell: >
        tsuru cname-add {{ elasticsearch_api }} -a elasticsearchapi
      when: "not \"{{ elasticsearch_api }}\" in elasticsearchapi_app_info.stdout"

    - name: Post Install Tasks | Generate elasticsearchapi.yml
      copy:
        content: |
          id: elasticsearch
          username: admin
          password: password
          endpoint:
            production: https://{{ elasticsearch_api }}
        dest: ~/elasticsearchapi.yml

    - name: Post Install Tasks | Register elasticsearch service
      shell: >
        crane create ~/elasticsearchapi.yml
      when: "not 'elasticsearch' in service_list.stdout"

    - debug: var=dashboard_app_info.stdout_lines
    - debug: var=postgresapi_app_info.stdout_lines
    - debug: var=elasticsearchapi_app_info.stdout_lines
